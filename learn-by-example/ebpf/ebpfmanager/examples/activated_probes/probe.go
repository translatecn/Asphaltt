// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x3d\x6f\xd3\x40\x18\x7e\x9c\x34\x6d\x71\xf9\x9e\x2c\xab\x43\xc4" +
	"\xd4\x2e\x86\x22\x84\x98\x50\x17\x60\xe9\x80\xa0\x03\x03\x92\x95\x26\x17\xd5\x4a\x6c\x07\xdb\x8d\x02\xe1\x63\x02" +
	"\x21\x26\x06\xf8\x01\x88\x7f\xc0\x92\x32\x21\x46\xfe\x01\x6c\x19\x3b\x96\x89\x0c\xa8\x46\xef\xe5\x2e\xb9\x9e\x73" +
	"\x69\x79\xa5\xe4\xde\xf7\x39\x3f\xef\xb7\xfd\xea\xce\xd6\xdd\x92\x65\x41\x8a\x85\x3f\x98\x5a\x8a\x54\xa6\xea\xa6" +
	"\xf8\x3f\x0f\x0b\x8e\x05\x74\xe2\x20\x22\x24\x5b\xb7\xd1\x77\x0f\x73\xd2\x09\x6f\xa6\xd5\x5d\xd2\xe3\xb8\x55\xed" +
	"\xbb\x07\x13\x3c\x6c\x35\x02\xd2\x93\xea\x5a\xb7\xef\x0e\x39\xfe\xed\xd3\xd8\xf7\x92\x05\x0c\xf3\x3c\x1f\x94\x00" +
	"\x07\xc0\x6b\x00\x8b\x00\x06\x22\xf6\x47\x71\x0e\x2c\x20\xb2\x81\x96\xfb\x37\x97\x76\x1c\x86\x71\xdd\x1d\x4d\xe2" +
	"\xec\x65\x41\x48\x3a\x4b\xfd\xba\xcc\x6b\x20\x8a\x4b\xdd\xa3\x42\xdc\x43\x11\xf7\xc2\x9c\xb8\xe4\xb7\xdb\x4c\x7d" +
	"\x5e\x57\x87\x45\xaa\x5f\x1b\x94\xcf\xc8\xe8\xd7\x3e\xc1\x2f\xeb\xd5\xdb\xa4\xef\x35\x98\x5d\xcc\xd7\xec\xf7\xcc" +
	"\x1c\xbf\xd4\x6b\xea\x33\xcd\x82\xe6\x40\xb3\xa2\x39\x51\x6f\xa8\x2f\xd4\xb3\xc8\xe6\x25\x51\x39\x36\x4f\x82\x12" +
	"\xc0\xbd\xfb\x5b\x00\x8e\xf2\x9c\xc7\xbd\x28\xf7\xe3\xd9\x03\x2c\x3f\x5f\xb1\xce\x62\x3c\x1f\x47\x59\x91\x9e\xa2" +
	"\xaf\x02\xb8\x61\xb8\x93\xf7\xdb\x8a\xfd\x68\xc6\x7d\x36\xe7\xde\x24\x5f\x00\x2c\xe0\x77\x3e\xeb\xae\x8c\xf2\x4c" +
	"\x4e\x19\x0b\x06\xbc\x62\xc0\x17\x0b\xd8\x0b\x00\x97\xf8\x24\xc6\x22\x3d\x3e\xe4\xb8\x5d\xc0\x3f\x00\xb8\xac\xf8" +
	"\x91\xf5\x3d\xe1\x78\xa5\x80\xaf\x73\x7c\x9a\xa7\xec\xe7\x12\xc7\xcb\x05\x7c\x55\x9c\xb4\x3e\x25\x00\xb7\x14\xbb" +
	"\xac\xf8\xb5\x44\x4e\x3d\xc5\xe6\xd1\xbd\x8c\xf5\x32\xb4\x3a\x49\xbc\xc3\x7c\x5a\x0f\xbe\x49\x02\xb8\xaa\x03\xfe" +
	"\xb1\x7d\x92\x4f\x1d\x07\xfd\x2e\x4b\xd2\x60\x7a\x2b\x77\x8e\x8b\xf4\x43\x00\xfc\x76\x50\x67\x51\xca\xe0\x25\xac" +
	"\xed\xb1\x5d\xbf\x99\xd4\x42\x26\x1f\x11\x1b\x2a\xdd\x48\x33\xac\x05\x91\x57\x87\x97\x66\x49\x56\xdb\x81\x97\x3e" +
	"\x0d\xf9\x99\xc4\x8d\x5a\x56\x23\x78\xc3\xdb\xb8\xa9\xd9\x33\xe7\xfb\x3f\xf2\x55\xf4\x53\x17\x47\x8c\xea\x40\xc3" +
	"\xf5\x6f\xab\x25\x7e\xfa\x46\x6d\x1a\xe2\xe9\x9b\xea\x9c\xc0\xd7\xdf\xbb\x65\xcd\xbe\x6d\xe0\xef\x9f\x92\xff\xd8" +
	"\xc0\xbf\x26\x0a\xd5\xdf\x5b\x9d\xff\xd9\xc0\x7f\x7b\x4a\xfe\x0f\xc1\xbf\xae\xe1\x43\xc1\x77\x34\x7c\xf2\x1d\x13" +
	"\xe7\x2f\x03\x7f\x24\x1e\xb8\xa2\xe1\x96\x76\xbe\x54\xde\x29\x55\xdc\xd2\xf8\xd4\xe7\xa5\xcf\x7f\xdb\xc0\xaf\x1a" +
	"\xf8\xba\xfd\x4e\x79\xc7\x55\x59\x13\xc0\x7b\x0d\xd7\xfb\xf7\x06\x50\xbe\x5a\x53\xf9\x29\x12\x92\x7b\x74\x0e\xc0" +
	"\x8a\xc2\x97\x7d\xfc\x3e\x23\x36\xc9\xbe\x00\xab\xa2\x60\x39\x63\xc9\x97\x73\xf9\x17\x00\x00\xff\xff\xec\x5d\x05" +
	"\x7b\x80\x08\x00\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2176,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1605626160, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
